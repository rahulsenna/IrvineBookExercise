Microsoft (R) Macro Assembler Version 14.36.32534.0	    10/23/23 14:26:28
7_10_Programming_Exercises.asm				     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.DATA

				;---------------------------------------------------------------
				; 1.
 = 00000005				DECIMAL_OFFSET = 5
 00000000 31 30 30 31 32		decimal_one BYTE "100123456789765",0
	   33 34 35 36 37
	   38 39 37 36 35
	   00
					
				;---------------------------------------------------------------
				; 2.


 00000010				op1			QWORD  0000000000000055h
	   0000000000000055
 00000018				op2			QWORD 0ffffffffffffffffh
	   FFFFFFFFFFFFFFFF
 00000020  00000002 [			difference	QWORD 2 DUP(?)  ;; = 56h
	    0000000000000000
	   ]

				;---------------------------------------------------------------
				; 3.

 00000030 08723654			bcd1 		DWORD 08723654h ; 8,723,654 decimal
 00000034 01234567			bcd2 		DWORD 01234567h
 00000038 09999999			bcd3 		DWORD 09999999h

 0000003C  00000009 [			ascii_buf	BYTE 9 DUP(0)
	    00
	   ]

				;---------------------------------------------------------------
				; 4.
 00000045 FE 04 01 00 FD		key 		SBYTE -2, 4, 1, 0, -3, 5, 2, -4, -4, 6
	   05 02 FC FC 06
 0000004F 54 68 69 73 20		msg1		BYTE "This is a test msg, it should be encrypted!!!",0
	   69 73 20 61 20
	   74 65 73 74 20
	   6D 73 67 2C 20
	   69 74 20 73 68
	   6F 75 6C 64 20
	   62 65 20 65 6E
	   63 72 79 70 74
	   65 64 21 21 21
	   00

				;---------------------------------------------------------------
				; 5.
 = 000003E8				N_PRIME		= 1000		
 0000007D  000003EA [			prime		BYTE	1002 DUP(1)
	    01
	   ]

				;---------------------------------------------------------------
				; 8.

					; align 4
 00000467 21234536			packed_1 	DWORD 21234536h									; 4 Byte Packed BCD
 0000046B 89517207			packed_2 	DWORD 89517207h					
					; add = 110,751,743

 0000046F				packed_3 	QWORD 2123453689517207h							; 8 Byte Packed BCD
	   2123453689517207
 00000477				packed_4 	QWORD 8951720721234536h
	   8951720721234536


 0000047F				packed_5 	QWORD 2123453689517207h,8951720721234536h		; 16 Byte Packed BCD
	   2123453689517207
	   8951720721234536
 0000048F				packed_6 	QWORD 8951720721234536h,2123453689517207h
	   8951720721234536
	   2123453689517207

 0000049F  00000011 [			packed_sum 	BYTE 17 DUP(0)
	    00
	   ]

 00000000			.CODE
 00000000			main PROC

 00000000  33 C0		xor eax,eax
 00000002  B0 FB		mov al,-5
 00000004  B3 05		mov bl, 5
 00000006  B1 01		mov cl, 1
 00000008  B2 FF		mov dl, -1


 0000000A  3C 00		cmp al, 0
 0000000C  80 FB 00		cmp bl, 0
 0000000F  80 F9 00		cmp cl,0
 00000012  80 FA 00		cmp dl,0
 00000015  B0 00		mov al,0
 00000017  3C 00		cmp al,0


				;---------------------------------------------------------------
				; 1. Display ASCII Decimal 

 00000019  BA 00000000 R		mov		edx, OFFSET decimal_one
 0000001E  B9 00000010			mov		ecx, LENGTHOF decimal_one
 00000023  BB 00000005			mov 	ebx, DECIMAL_OFFSET
 00000028  E8 000000C5			call	WriteScaled

				;---------------------------------------------------------------
				; 2. Extended Subtraction Procedure

 0000002D  BE 00000010 R		mov		esi,OFFSET op1					; first operand
 00000032  BF 00000018 R		mov		edi,OFFSET op2					; second operand
 00000037  BB 00000020 R		mov		ebx,OFFSET difference			; difference operand
 0000003C  B9 00000002			mov		ecx,SIZE op1 / TYPE DWORD		; number of bytes
 00000041  E8 000000D3			call	Extended_Sub
					
				;---------------------------------------------------------------
				; 3. Packed Decimal Conversion

 00000046  BA 0000003C R		mov		edx, OFFSET ascii_buf
					
 0000004B  A1 00000030 R		mov		eax,bcd1
 00000050  E8 000000E4			call	PackedToAsc
 00000055  E8 00000000 E		call	Crlf
 0000005A  E8 00000000 E		call	WriteString

 0000005F  A1 00000034 R		mov		eax,bcd2
 00000064  E8 000000D0			call	PackedToAsc
 00000069  E8 00000000 E		call	Crlf
 0000006E  E8 00000000 E		call	WriteString

 00000073  A1 00000038 R		mov		eax,bcd3
 00000078  E8 000000BC			call	PackedToAsc
 0000007D  E8 00000000 E		call	Crlf
 00000082  E8 00000000 E		call	WriteString

				;---------------------------------------------------------------
				; 4. Encryption Using Rotate Operations

 00000087  BB 00000045 R		mov		ebx,OFFSET key
 0000008C  BA 0000004F R		mov		edx,OFFSET msg1
 00000091  B9 0000002E			mov		ecx,SIZEOF msg1
 00000096  E8 000000B6			call	EncryptMsg
 0000009B  E8 000000B1			call	EncryptMsg


				;---------------------------------------------------------------
				; 5. Prime Numbers
					
 000000A0  BE 0000007D R		mov		esi, OFFSET prime
 000000A5  E8 000000D5			call	GeneratePrimeNumbers

				;---------------------------------------------------------------
				; 6. Greatest Common Divisor (GCD)

 000000AA  BE 00000006			mov     esi,6
 000000AF  BF 0000000C			mov		edi,12
 000000B4  E8 0000010F			call	GCD

				;---------------------------------------------------------------
				; 7. Bitwise Multiplication


 000000B9  B8 00000234			mov		eax, 564
 000000BE  BB 0000037E			mov		ebx, 894
					
 000000C3  B8 00000002			mov		eax, 2
 000000C8  BB 00000007			mov		ebx, 7
 000000CD  E8 00000160			call	BitwiseMultiply2

				;---------------------------------------------------------------
				; 8. Add Packed Integers
					
 000000D2  BA 0000049F R		mov		edx,OFFSET packed_sum
 000000D7  B9 00000010			mov		ecx,SIZEOF packed_5
 000000DC  BE 0000047F R		mov		esi,OFFSET packed_5
 000000E1  BF 0000048F R		mov		edi,OFFSET packed_6

 000000E6  E8 00000185			call	AddPacked

					exit
 000000EB  6A 00	   *	    push   +000000000h
 000000ED  E8 00000000 E   *	    call   ExitProcess
 000000F2			main ENDP


				;-----------------------------------------------------------------
 000000F2			WriteScaled PROC USES edx ecx ebx
				;	Prints a decimal ASCII number with decimal point.
				;	receives	EDX=Offset to num,ECX=Length of num, EBX=Offset to decimal point from right
				;	returns		Nothing
				;-----------------------------------------------------------------
 000000F2  52		   *	    push   edx
 000000F3  51		   *	    push   ecx
 000000F4  53		   *	    push   ebx
 000000F5  8B F2			mov		esi,edx
 000000F7  03 F1			add		esi,ecx
 000000F9  2B F3			sub		esi,ebx
 000000FB  8A 06			mov		al, BYTE PTR [esi]
 000000FD  C6 06 00			mov		BYTE PTR [esi],0				; null terminating right where the decimal point is.
 00000100  E8 00000000 E		call	WriteString

 00000105  88 06			mov		BYTE PTR [esi],al				; retrieving the character back
					
 00000107  B0 2E			mov		al,'.'
 00000109  E8 00000000 E		call	WriteChar
					
 0000010E  8B D6			mov		edx,esi
 00000110  E8 00000000 E		call	WriteString						; printing rest to the numbers(after decimal point)

					ret
 00000115  5B		   *	    pop    ebx
 00000116  59		   *	    pop    ecx
 00000117  5A		   *	    pop    edx
 00000118  C3		   *	    ret    00000h
 00000119			WriteScaled ENDP


				;--------------------------------------------------------
 00000119			Extended_Sub PROC
				;
				; Calculates the difference of two extended integers stored
				; as arrays of DWORDS.
				; Receives: ESI and EDI point to the two integers,
				; EBX points to a variable that will hold the difference,
				; and ECX indicates the number of DWORDS to be added.
				; Storage for the difference must be one byte longer than the
				; input operands.
				; Returns: nothing
				;--------------------------------------------------------
 00000119  60				pushad
 0000011A  F8				clc ; clear the Carry flag

 0000011B			L1:
 0000011B  8B 06			mov		eax,[esi]						; get the first integer
 0000011D  1B 07			sbb		eax,[edi]						; subtract the second integer
 0000011F  9C				pushfd									; save carry flag
 00000120  88 03			mov		[ebx],al						; store partial difference
 00000122  83 C6 04			add		esi, TYPE DWORD					; advance all three pointers
 00000125  83 C7 04			add		edi, TYPE DWORD
 00000128  83 C3 04			add		ebx, TYPE DWORD
 0000012B  9D				popfd									; restore carry flag
 0000012C  E2 ED		loop L1 									; repeat the loop
 0000012E  C7 03 00000000		mov		DWORD PTR [ebx],0 				; clear high byte of difference
 00000134  83 1B 00			sbb		DWORD PTR [ebx],0 				; subtract any leftover carry
 00000137  61				popad
 00000138  C3				ret
 00000139			Extended_Sub ENDP


				;----------------------------------------------------------------
 00000139			PackedToAsc PROC USES edx
				;
				; procedure that converts a 4-byte packed decimal number
				; to a string of ASCII decimal digits
				; Receives: EAX = packed decimal number
				; Returns: String of ASCII digits in buffer pointed by EDX
				;------------------------------------------------------------------

 00000139  52		   *	    push   edx
 0000013A  B9 00000008			mov		ecx,8
 0000013F			L1:
 0000013F  C1 C0 04			rol		eax,4						; move high 4 bits to low 4 bits
 00000142  8A D8			mov		bl,al						; 
 00000144  80 E3 0F			and		bl,0fh						; mask out low 4 bits in 8bit register
 00000147  80 CB 30			or		bl,30h						; convert packed BCD to ascii
 0000014A  88 1A			mov		BYTE PTR [edx],bl
 0000014C  42				inc		edx

 0000014D  E2 F0			loop	L1
					ret
 0000014F  5A		   *	    pop    edx
 00000150  C3		   *	    ret    00000h
 00000151			PackedToAsc ENDP

				;----------------------------------------------------------------
 00000151			EncryptMsg	PROC USES ecx edx ebx esi
				;
				; Encrypts a string using rotate insturctions
				; 
				; Receives: EDX= Points to string, ECX= length of string, EBX= points to key
				; Returns: Encrypted string buffer pointed by EDX
				;----------------------------------------------------------------

 00000151  51		   *	    push   ecx
 00000152  52		   *	    push   edx
 00000153  53		   *	    push   ebx
 00000154  56		   *	    push   esi
 00000155  BE 00000000			mov		esi,0
 0000015A			L1:
 0000015A  51				push	ecx
 0000015B  8A 0C 33			mov		cl,[ebx+esi]
 0000015E  80 F9 00			cmp		cl,0
 00000161  7F 06			jg		ShiftRight
 00000163			ShiftLeft:
 00000163  F6 D9			neg		cl
 00000165  D2 02			rol		BYTE PTR[edx],cl
 00000167  EB 02			jmp		Continue
 00000169			ShiftRight:
 00000169  D2 0A			ror		BYTE PTR[edx],cl
					
 0000016B			Continue:
 0000016B  42				inc		edx
					

 0000016C  46				inc		esi
 0000016D  83 FE 0A			cmp		esi,10
 00000170  76 05			jbe		EndLoop
 00000172  BE 00000000			mov		esi,0
 00000177			EndLoop: 
 00000177  59				pop		ecx
 00000178  E2 E0			loop	L1
					ret
 0000017A  5E		   *	    pop    esi
 0000017B  5B		   *	    pop    ebx
 0000017C  5A		   *	    pop    edx
 0000017D  59		   *	    pop    ecx
 0000017E  C3		   *	    ret    00000h
 0000017F			EncryptMsg	ENDP


				;----------------------------------------------------------------
 0000017F			GeneratePrimeNumbers	PROC USES eax ecx edx
				;
				; Generates prime numbers from 2 to 1000 using Sieve of Eratosthenes algorithm
				; 
				; Receives: ESI= Points to all prime array, N = 1000
				; Returns: Nothing
				;----------------------------------------------------------------

 0000017F  50		   *	    push   eax
 00000180  51		   *	    push   ecx
 00000181  52		   *	    push   edx
 00000182  B9 00000002			mov		ecx,2
 00000187			L1:	
 00000187  8B C1			mov		eax,ecx
 00000189  F7 E1			mul		ecx							; multiply eax =ecx*eax = i*i
 0000018B  3D 000003E8			cmp		eax,N_PRIME					; i*i < N
 00000190  77 10			ja		BeginPrint					; if not jump to printing part
 00000192			L2:
 00000192  C6 04 06 00			mov		BYTE PTR [esi+eax],0
					
 00000196  03 C1			add		eax,ecx
 00000198  3D 000003E8			cmp		eax,N_PRIME
 0000019D  76 F3			jbe		L2
					
 0000019F  41				inc		ecx
 000001A0  EB E5			jmp		L1

					
				;----------------------------------------
				;	Print Prime Numbers

 000001A2			BeginPrint:
 000001A2  E8 00000000 E		call	Crlf
 000001A7  B8 00000002			mov		eax,2
 000001AC			PrintLoop:
 000001AC  F6 04 06 01			test	BYTE PTR [esi+eax],1
 000001B0  74 0A			jz		Continue
 000001B2  E8 00000000 E		call	WriteDec
 000001B7  E8 00000000 E		call	Crlf
 000001BC			Continue:
 000001BC  40				inc		eax
 000001BD  3D 000003E8			cmp		eax,N_PRIME
 000001C2  76 E8			jbe		PrintLoop
					
					ret
 000001C4  5A		   *	    pop    edx
 000001C5  59		   *	    pop    ecx
 000001C6  58		   *	    pop    eax
 000001C7  C3		   *	    ret    00000h
 000001C8			GeneratePrimeNumbers	ENDP


				;----------------------------------------------------------------
 000001C8			GCD	PROC USES esi edi edx
				;
				; Find Greatest common divisor
				; 
				; Receives: ESI=x int, EDI=y int
				; Returns: EAX=gdc int
				;----------------------------------------------------------------

 000001C8  56		   *	    push   esi
 000001C9  57		   *	    push   edi
 000001CA  52		   *	    push   edx
 000001CB  8B C6		    mov		eax,esi
 000001CD  E8 00000022			call	Abs
 000001D2  8B F0			mov		esi,eax

 000001D4  8B C7			mov		eax,edi
 000001D6  E8 00000019			call	Abs
 000001DB  8B F8			mov		edi,eax


 000001DD			L1:
 000001DD  83 FF 00			cmp		edi,0
 000001E0  7E 0C			jle		EndLoop				; if y <= 0 ; exit

 000001E2  8B C6			mov		eax,esi
 000001E4  33 D2			xor		edx,edx				; clear edx
 000001E6  F7 F7			div		edi					; x / y
					
 000001E8  8B F7			mov		esi,edi				; x = y
 000001EA  8B FA			mov		edi,edx				; y = remainder
 000001EC  EB EF			jmp		L1
 000001EE			EndLoop:	
					
 000001EE  8B C6			mov		eax,esi
					ret
 000001F0  5A		   *	    pop    edx
 000001F1  5F		   *	    pop    edi
 000001F2  5E		   *	    pop    esi
 000001F3  C3		   *	    ret    00000h
 000001F4			GCD	ENDP

				;----------------------------------------------------------------
 000001F4			Abs	PROC USES edx
				;
				; Find absolute value in the eax register
				; 
				; Receives: EAX=value
				; Returns: EAX=abs value
				;----------------------------------------------------------------

 000001F4  52		   *	    push   edx
 000001F5  8B D0		    mov     edx, eax        ; Copy the number to edx
 000001F7  C1 FA 1F		    sar     edx, 31         ; Shift sign bit of edx to the rightmost bit

 000001FA  33 C2		    xor     eax, edx        ; XOR the number with the sign extension
 000001FC  2B C2		    sub     eax, edx        ; Subtract the sign extension
					ret
 000001FE  5A		   *	    pop    edx
 000001FF  C3		   *	    ret    00000h

				COMMENT !
					;----------------------------
					; Clang verison
					mov		eax, edi
					neg		eax
					cmovl	eax, edi		; mov if eax < edi
					;----------------------------
					; GCC version
					mov     eax, edi
					cdq						; edx = FFFFFFF or 0000000 based on eax's sign
					xor     eax, edx
					sub     eax, edx
				!
 00000200			Abs	ENDP

				; My version (Naive)
				;----------------------------------------------------------------
 00000200			BitwiseMultiply	PROC USES ebx ecx esi edi
				;
				; Multiply EAX with EDX and store the result in EAX
				; using bitwise multiply method
				; 
				; Receives: EAX=unsigned int, EBX=unsigned int
				; Returns: EAX=result
				;----------------------------------------------------------------
 00000200  53		   *	    push   ebx
 00000201  51		   *	    push   ecx
 00000202  56		   *	    push   esi
 00000203  57		   *	    push   edi
 00000204  8B F8			mov edi,eax
 00000206  B8 00000000			mov	eax,0
 0000020B			BegLoop:
 0000020B  83 FB 00			cmp	ebx,0
 0000020E  74 1D			jz	EndProc

 00000210  B1 00			mov	cl,0
 00000212  BA 00000001			mov edx,1
 00000217			L1:
 00000217  D1 E2			shl	edx,1
 00000219  FE C1			inc	cl
 0000021B  3B D3			cmp	edx,ebx
 0000021D  72 F8			jb	L1
				;---------------------
 0000021F  FE C9			dec cl
 00000221  D1 EA			shr edx,1

 00000223  2B DA			sub	ebx,edx
					
 00000225  8B F7			mov	esi,edi
 00000227  D3 E6			shl	esi,cl

 00000229  03 C6			add	eax,esi

 0000022B  EB DE			jmp	BegLoop

 0000022D			EndProc:
					ret
 0000022D  5F		   *	    pop    edi
 0000022E  5E		   *	    pop    esi
 0000022F  59		   *	    pop    ecx
 00000230  5B		   *	    pop    ebx
 00000231  C3		   *	    ret    00000h
 00000232			BitwiseMultiply	ENDP



				; https://stackoverflow.com/questions/26305068/how-do-i-perform-bitwise-multiplication-division-in-masm-x86-assembly
				; Multiply EBX by EAX
 00000232			BitwiseMultiply2 PROC USES EBX ECX EDX
 00000232  53		   *	    push   ebx
 00000233  51		   *	    push   ecx
 00000234  52		   *	    push   edx
 00000235  8B D0		    mov edx, eax            ; EDX: multiplier (EBX: multiplicand)
 00000237  33 C0		    xor eax, eax            ; Result will be in EAX - clear it
 00000239  0F BD CA		    bsr ecx, edx            ; ECX = position of the most significant bit
 0000023C  74 0D		    jz R1                   ; Return with EAX=0 if EDX == 0

 0000023E			    L1:
 0000023E  D1 EA		    shr edx, 1              ; Look at the rightmost bit of the multiplier
 00000240  73 02		    jnc @F                  ; Skip addition if this bit == 0
 00000242  03 C3		    add eax, ebx            ; Add multiplikand to result
 00000244			    @@:
 00000244  D1 E3		    shl ebx, 1              ; Increase multipland for the next round
 00000246  83 E9 01		    sub ecx, 1              ; Decrease loop variable
 00000249  73 F3		    jnc L1                  ; Loop if ECX >= 0

 0000024B			    R1:
				    ret                     ; Result in EAX
 0000024B  5A		   *	    pop    edx
 0000024C  59		   *	    pop    ecx
 0000024D  5B		   *	    pop    ebx
 0000024E  C3		   *	    ret    00000h
 0000024F			BitwiseMultiply2 ENDP

				; Divide EAX by EBX
 0000024F			BitwiseDivide PROC USES ECX EDX ESI
 0000024F  51		   *	    push   ecx
 00000250  52		   *	    push   edx
 00000251  56		   *	    push   esi
 00000252  8B F0		    mov esi, eax            ; ESI: dividend (EBX: divisor)
 00000254  33 C0		    xor eax, eax            ; Result (quotient) = 0
 00000256  33 D2		    xor edx, edx            ; EDX = 0 (start value)
 00000258  B1 20		    mov cl, 32              ; 32 loops

 0000025A			    L1:
 0000025A  D1 E6		    shl esi, 1              ; Bit 31 from EAX ...
 0000025C  D1 D2		    rcl edx, 1              ;     ... to Bit 1 of EDX
 0000025E  3B DA		    cmp ebx, edx            ; Carry, if EDX > Divisor
 00000260  77 03		    ja @F                   ; Skip subtraction if carry==0 and zero==0 (result not zero)
 00000262  2B D3		    sub edx, ebx            ; Subtract ...
 00000264  F9			    stc                     ;     ... and set carry
 00000265			    @@:
 00000265  D1 D0		    rcl eax, 1              ; Append carry (0 or 1) to quotient.
 00000267  80 E9 01		    sub cl, 1
 0000026A  75 EE		    jnz L1                  ; loop while CL > 0

				    ret                     ; Result in EAX
 0000026C  5E		   *	    pop    esi
 0000026D  5A		   *	    pop    edx
 0000026E  59		   *	    pop    ecx
 0000026F  C3		   *	    ret    00000h
 00000270			BitwiseDivide ENDP


				;----------------------------------------------------------------
 00000270			AddPacked	PROC
				;
				; Add two packed decimal interger of arbitrary size
				; 
				; Receives: ESI - pointer to the first number, EDI - pointer to the second number 
				; 			EDX - pointer to the sum, ECX - number of bytes to add
				; Returns: Nothing
				;----------------------------------------------------------------

					
 00000270  F8				clc						; clear carry
 00000271  33 DB			xor ebx,ebx
 00000273			L1:
 00000273  8A 04 1E			mov al,BYTE PTR [esi+ebx]
 00000276  12 04 1F			adc	al,BYTE PTR [edi+ebx]
 00000279  27				daa
 0000027A  88 04 1A			mov	BYTE PTR [edx+ebx],al
 0000027D  43				inc ebx
 0000027E  E2 F3			loop L1

 00000280  80 14 1A 00			adc BYTE PTR [edx+ebx],0
 00000284  27				daa

					;----------------------------------------
					;	Print 17 byte result

 00000285  33 C0			xor eax,eax
 00000287  8A 42 10			mov	al, BYTE PTR [edx+16]
 0000028A  E8 00000000 E		call WriteHex

 0000028F  8B 42 0C			mov	eax, DWORD PTR [edx+12]
 00000292  E8 00000000 E		call WriteHex

 00000297  8B 42 08			mov	eax, DWORD PTR [edx+8]
 0000029A  E8 00000000 E		call WriteHex

 0000029F  8B 42 04			mov	eax, DWORD PTR [edx+4]
 000002A2  E8 00000000 E		call WriteHex

 000002A7  8B 02			mov	eax, DWORD PTR [edx]
 000002A9  E8 00000000 E		call WriteHex
 000002AE  C3				ret
 000002AF			AddPacked	ENDP

				END main
Microsoft (R) Macro Assembler Version 14.36.32534.0	    10/23/23 14:26:28
7_10_Programming_Exercises.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004B0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002AF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Abs  . . . . . . . . . . . . . .	P Near	 000001F4 _TEXT	Length= 0000000C Public STDCALL
AddPacked  . . . . . . . . . . .	P Near	 00000270 _TEXT	Length= 0000003F Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000273 _TEXT	
BitwiseDivide  . . . . . . . . .	P Near	 0000024F _TEXT	Length= 00000021 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000025A _TEXT	
BitwiseMultiply2 . . . . . . . .	P Near	 00000232 _TEXT	Length= 0000001D Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000023E _TEXT	
  R1 . . . . . . . . . . . . . .	L Near	 0000024B _TEXT	
BitwiseMultiply  . . . . . . . .	P Near	 00000200 _TEXT	Length= 00000032 Public STDCALL
  BegLoop  . . . . . . . . . . .	L Near	 0000020B _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000217 _TEXT	
  EndProc  . . . . . . . . . . .	L Near	 0000022D _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EncryptMsg . . . . . . . . . . .	P Near	 00000151 _TEXT	Length= 0000002E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000015A _TEXT	
  ShiftLeft  . . . . . . . . . .	L Near	 00000163 _TEXT	
  ShiftRight . . . . . . . . . .	L Near	 00000169 _TEXT	
  Continue . . . . . . . . . . .	L Near	 0000016B _TEXT	
  EndLoop  . . . . . . . . . . .	L Near	 00000177 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Extended_Sub . . . . . . . . . .	P Near	 00000119 _TEXT	Length= 00000020 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000011B _TEXT	
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GCD  . . . . . . . . . . . . . .	P Near	 000001C8 _TEXT	Length= 0000002C Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001DD _TEXT	
  EndLoop  . . . . . . . . . . .	L Near	 000001EE _TEXT	
GeneratePrimeNumbers . . . . . .	P Near	 0000017F _TEXT	Length= 00000049 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000187 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000192 _TEXT	
  BeginPrint . . . . . . . . . .	L Near	 000001A2 _TEXT	
  PrintLoop  . . . . . . . . . .	L Near	 000001AC _TEXT	
  Continue . . . . . . . . . . .	L Near	 000001BC _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PackedToAsc  . . . . . . . . . .	P Near	 00000139 _TEXT	Length= 00000018 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000013F _TEXT	
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteScaled  . . . . . . . . . .	P Near	 000000F2 _TEXT	Length= 00000027 Public STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F2 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DECIMAL_OFFSET . . . . . . . . .	Number	 00000005h   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
N_PRIME  . . . . . . . . . . . .	Number	 000003E8h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ascii_buf  . . . . . . . . . . .	Byte	 0000003C _DATA	
bcd1 . . . . . . . . . . . . . .	DWord	 00000030 _DATA	
bcd2 . . . . . . . . . . . . . .	DWord	 00000034 _DATA	
bcd3 . . . . . . . . . . . . . .	DWord	 00000038 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
decimal_one  . . . . . . . . . .	Byte	 00000000 _DATA	
difference . . . . . . . . . . .	QWord	 00000020 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
key  . . . . . . . . . . . . . .	Byte	 00000045 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
msg1 . . . . . . . . . . . . . .	Byte	 0000004F _DATA	
op1  . . . . . . . . . . . . . .	QWord	 00000010 _DATA	
op2  . . . . . . . . . . . . . .	QWord	 00000018 _DATA	
packed_1 . . . . . . . . . . . .	DWord	 00000467 _DATA	
packed_2 . . . . . . . . . . . .	DWord	 0000046B _DATA	
packed_3 . . . . . . . . . . . .	QWord	 0000046F _DATA	
packed_4 . . . . . . . . . . . .	QWord	 00000477 _DATA	
packed_5 . . . . . . . . . . . .	QWord	 0000047F _DATA	
packed_6 . . . . . . . . . . . .	QWord	 0000048F _DATA	
packed_sum . . . . . . . . . . .	Byte	 0000049F _DATA	
prime  . . . . . . . . . . . . .	Byte	 0000007D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
